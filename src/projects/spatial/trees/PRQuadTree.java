package projects.spatial.trees;

import projects.spatial.kdpoint.KDPoint;
import projects.spatial.knnutils.BoundedPriorityQueue;
import projects.spatial.node.*;

import java.util.Collection;

/**
 * <p><tt>PRQuadTree</tt> implements Point-Region (P-R) QuadTrees. Those are trie-based
 * decompositions of 2D space which, unlike KD-Trees, is not generated by the data points,
 * but is decided in advance.</p>
 *
 * <p>Because PR-QuadTrees are 4-ary instead of binary trees, they can offer better search
 * efficiency than KD-Trees. On the other hand, </p>
 * @author <a href="mailto:jasonfil@cs.umd.edu">Jason Filippou</a>
 */
public class PRQuadTree implements SpatialTree {

    /**
     * Our root is a {@link PRQuadNode}. If null, it is assumed to be a white node.
     */
    private PRQuadNode root;


    public PRQuadTree(int bucketParam){
        
    }
    /**
     * Inserts <tt>p</tt> into the <tt>KDTree</tt>.
     *
     * @param p The {@link KDPoint} to insert into the tree.
     */
    @Override
    public void insert(KDPoint p) {

    }

    /**
     * Deletes <tt>p</tt> from the <tt>KDTree</tt>. If <tt>p</tt> is not in the
     * tree, this method performs no changes to the tree.
     *
     * @param p The {@link KDPoint} to delete from the tree.
     */
    @Override
    public void delete(KDPoint p) {

    }

    /**
     * Searches the tree for <tt>p</tt> and reports if it found it.
     *
     * @param p The {@link KDPoint} to look for in the tree.
     * @return <tt>true</tt> iff <tt>p</tt> is in the tree.
     */
    @Override
    public boolean search(KDPoint p) {
        return false;
    }

    @Override
    public Collection<KDPoint> range(KDPoint p, double range) {
        return null;
    }

    @Override
    public KDPoint nearestNeighbor(KDPoint p) {
        return null;
    }


    @Override
    public BoundedPriorityQueue<KDPoint> kNearestNeighbors(int k, KDPoint p) {
        return null;
    }

    /**
     * Returns the height of the tree. By convention, the height of an empty tree is -1.
     *
     * @return The height of <tt>this</tt>.
     */
    @Override
    public int height() {
        return 0;
    }

    /**
     * Reports whether the <tt>KDTree</tt> is empty, that is, it contains zero <tt>KDPoint</tt>s.
     *
     * @return <tt>true</tt> iff height() == -1.
     */
    @Override
    public boolean isEmpty() {
        return false;
    }
}
