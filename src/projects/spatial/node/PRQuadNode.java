package projects.spatial.node;

import projects.spatial.kdpoint.KDPoint;

/**
 * <p><tt>PRQuadNode</tt> is an <tt>abstract class</tt> used to provide the common structure that all
 * implementing subclasses will share. </p>
 *
 * @author <a href="mailto:jasonfil@cs.umd.edu">Jason Filippou</a>
 */
public abstract class PRQuadNode {

    /**
     *  The number of children of the quadtree. Hardcoded to 4 by the constructor.  
     */
    protected PRQuadNode[] children; // White nodes will be represented with null.

    /**
     * The exponent of 2 that describes the width of the square spanned by the node. That is to say,
     * the width of the current square is 2^<tt>exp</tt>, so its area is 2^<tt>exp</tt> &#42;
     * 2^<tt>exp</tt>, and its centroid has coordinates (2^(<tt>exp</tt> - 1), 2^(<tt>exp</tt> - 1)).
     * These coordinates are generated by assuming that the square's top left corner has coordinates
     * <tt>(0, 0)</tt>. 
     */
    protected int exp;

    /**
     *  Only common piece of the interface. Subclasses can use this constructor's functionality
     * to implement their own constructors, using <tt>super()</tt>. They can then of course add more
     * instructions to their own constructors. 
     * @param exp The exponent to which 2 (two) is raised to describe the width of the current square.
     * @see #exp
     */
    public PRQuadNode(int exp){
        children = new PRQuadNode[4];
        this.exp = exp;
    }

    /**
     *  Inserts the given point in the subtree rooted at the current node.  
     * @param p A {@link KDPoint}.
     */
    public abstract void insert(KDPoint p);

    /**
     * Deletes the given point from the subtree rooted at the current node. If the
     * point is not in the subtree, no changes should be performed in the subtree. 
     */
    public abstract PRQuadNode delete(KDPoint p);

}
